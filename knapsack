def knapsack(weights, values, capacity):

    num_items = len(weights)
    
    
    dp = [[0 for _ in range(capacity + 1)] for _ in range(num_items + 1)]

    
    for i in range(1, num_items + 1):
        for j in range(1, capacity + 1):
            if weights[i - 1] <= j:
                dp[i][j] = max(
                    dp[i - 1][j],
                    dp[i - 1][j - weights[i - 1]] + values[i - 1]
                )
            else:
                dp[i][j] = dp[i - 1][j]

    
    selected_items = []
    max_value = dp[num_items][capacity]
    remaining_capacity = capacity

    for i in range(num_items, 0, -1):
        if dp[i][remaining_capacity] != dp[i - 1][remaining_capacity]:
            selected_items.append(i - 1)
            remaining_capacity -= weights[i - 1]

    
    selected_items.reverse()

    return max_value, selected_items

# Example usage
weights = [3, 4, 10, 2]
values = [5, 5, 8, 2]
capacity = 10

max_value, selected_items = knapsack_bottom_up(weights, values, capacity)

# Print the result
print("The maximum value that can be obtained within the weight limit is:", max_value)
print("Items selected (0-indexed):", selected_items)



