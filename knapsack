def knapsack(weights, values, W):
    N = len(weights)
    dp = [[0] * (W + 1) for _ in range(N + 1)]

    # Populate the DP array
    for i in range(1, N + 1):
        for w in range(1, W + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])
            else:
                dp[i][w] = dp[i - 1][w]
    
    # To find which items to take, backtrack from dp[N][W]
    result = []
    w = W
    for i in range(N, 0, -1):
        if dp[i][w] != dp[i - 1][w]:
            result.append(i - 1)  # The item index
            w -= weights[i - 1]
    
    return dp[N][W], result

weights = [3, 4, 10, 2,3]
values = [5, 5, 8, 2,5]
W = 10
max_value, items_taken = knapsack(weights, values, W)

print(f"Maximum value: {max_value}")
print(f"Items taken (0-indexed): {items_taken}")

